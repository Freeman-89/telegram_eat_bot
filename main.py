import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import Message, ChatMemberUpdated, Chat
from aiogram.filters import Command
from aiogram.enums import ChatMemberStatus
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.client.default import DefaultBotProperties

API_TOKEN = "7401774647:AAFiG2GoT3s27Ga9ih8vHNS3RcDPTm8tbPU"
GROUP_CHAT_ID = None  # –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º chat_id

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()


@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π!")


async def get_bot_group():
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –±–æ—Ç —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ """
    global GROUP_CHAT_ID

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    bot_info = await bot.get_me()

    try:
        chat_admins = await bot.get_chat_administrators(GROUP_CHAT_ID)
        if chat_admins:
            GROUP_CHAT_ID = chat_admins[0].chat.id
            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—á–∞—Å—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ: {GROUP_CHAT_ID}")
            return True
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤: {e}")

    return False


@dp.chat_member()
async def on_bot_added(event: ChatMemberUpdated):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É """
    global GROUP_CHAT_ID
    if event.new_chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR]:
        GROUP_CHAT_ID = event.chat.id
        logging.info(f"‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç: {GROUP_CHAT_ID}")


async def start_poll():
    """ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è """
    global GROUP_CHAT_ID
    if GROUP_CHAT_ID:
        question = ("–ù–∞ –∫–æ–≥–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –µ–¥—É? –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ —Ç—Ä–∏ –ø–æ—Ä—Ü–∏–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ü–∏–∏ 35000$."
                    "–î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, —Å—Ç–æ–∏–º–æ—Å—Ç—å 30000$ –∏ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞–≤—à–∏—Ö")
        options = [
            "–î–∞, —è –±—É–¥—É. –°—Ä–æ—á–Ω–æ –∑–∞–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ü–∏—é –¥–ª—è –º–µ–Ω—è",
            "–ù–µ—Ç, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –±—É–¥—É –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å, —Å–ø–∞—Å–∏–±–æ",
        ]
        await bot.send_poll(GROUP_CHAT_ID, question, options, is_anonymous=False)
        logging.info(f"üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {GROUP_CHAT_ID}")
    else:
        logging.warning("‚ùå –ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


async def wait_for_chat_id():
    """ –ñ–¥—ë–º, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è `GROUP_CHAT_ID`, –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —à–µ–¥—É–ª–µ—Ä–∞ """
    global GROUP_CHAT_ID
    logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ chat_id...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ —É–∂–µ –≥—Ä—É–ø–ø–∞
    if await get_bot_group():
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç, –∂–¥—ë–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    while GROUP_CHAT_ID is None:
        await asyncio.sleep(1)

    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω chat_id: {GROUP_CHAT_ID}")


async def schedule_poll():
    """ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å `GROUP_CHAT_ID` """
    await wait_for_chat_id()  # –ñ–¥—ë–º, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è `chat_id`
    scheduler.add_job(start_poll, "interval", minutes=1)
    scheduler.start()
    logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!")


async def main():
    asyncio.create_task(schedule_poll())  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–µ
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞


if __name__ == "__main__":
    asyncio.run(main())
